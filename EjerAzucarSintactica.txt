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
-- Ejer 1
-- A
let x : Nat = 2 in x + 1 
=<def. s1>
let (x : Nat) = 2 in x + 1 

-- B
fun (x:Nat) -> x (es Core)

-- C
let id (x:Nat) : Nat = x in id 10
=<def. s2>
let id:Nat->Nat = fun (x:Nat)-> x in id 10
=<def s1>
let (id:Nat->Nat) = fun (x:Nat)-> x in id 10

--D
let app5 (f : Nat -> Nat) : Nat = f 5 in app5 (fun (x : Nat) -> x + x)
=<def s2>
let app5 : Nat -> Nat -> Nat = fun (f : Nat -> Nat) -> f 5 
	in app5 (fun (x : Nat) -> x + x)
=<def s1>
let (app5 : Nat -> Nat -> Nat) = fun (f : Nat -> Nat) -> f 5 
	in app5 (fun (x : Nat) -> x + x)

--E
fun (x:Nat) (y:Nat) -> ifz x then y else 1
=<def s3>
fun (x:Nat) -> fun (y:Nat) -> ifz x then y else 1

-- EJER 2
-- A

let rec doble (x:Nat) : Nat = ifz x then 0 else 2 + (doble (x - 1))
=<def S10>
let doble : Nat -> Nat = fix (doble : Nat -> Nat) (x : Nat) -> ifz x then 0 else 2 + (doble (x - 1))


-- B
let rec ack (m:Nat) (n:Nat) : Nat =
	ifz m
	then n + 1
	else (ifz n
	      then ack (m - 1) 1
	      else ack (m - 1) (ack m (n - 1)))

= Para el lector.





